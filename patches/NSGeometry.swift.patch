--- swift-corelibs-foundation/Foundation/NSGeometry.swift.orig	2016-12-11 13:23:21.968216861 +1000
+++ swift-corelibs-foundation/Foundation/NSGeometry.swift	2016-12-12 07:09:34.145108906 +1000
@@ -463,81 +463,81 @@
 
     if opts.contains(.AlignWidthInward) && width != 0 {
         guard width.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        width = floor(aRect.size.width.native)
+        width = floor(Double(aRect.size.width.native))
     }
     if opts.contains(.AlignHeightInward) && height != 0 {
         guard height.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        height = floor(aRect.size.height.native)
+        height = floor(Double(aRect.size.height.native))
     }
     if opts.contains(.AlignWidthOutward) && width != 0 {
         guard width.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        width = ceil(aRect.size.width.native)
+        width = ceil(Double(aRect.size.width.native))
     }
     if opts.contains(.AlignHeightOutward) && height != 0 {
         guard height.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        height = ceil(aRect.size.height.native)
+        height = ceil(Double(aRect.size.height.native))
     }
     if opts.contains(.AlignWidthNearest) && width != 0 {
         guard width.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        width = round(aRect.size.width.native)
+        width = round(Double(aRect.size.width.native))
     }
     if opts.contains(.AlignHeightNearest) && height != 0 {
         guard height.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        height = round(aRect.size.height.native)
+        height = round(Double(aRect.size.height.native))
     }
 
     
     if opts.contains(.AlignMinXInward) {
         guard minX.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        minX = ceil(aRect.origin.x.native)
+        minX = ceil(Double(aRect.origin.x.native))
     }
     if opts.contains(.AlignMinYInward) {
         guard minY.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        minY = ceil(aRect.origin.y.native)
+        minY = ceil(Double(aRect.origin.y.native))
     }
     if opts.contains(.AlignMaxXInward) {
         guard maxX.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        maxX = floor(aRect.origin.x.native + aRect.size.width.native)
+        maxX = floor(Double(aRect.origin.x.native + aRect.size.width.native))
     }
     if opts.contains(.AlignMaxYInward) {
         guard maxY.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        maxY = floor(aRect.origin.y.native + aRect.size.height.native)
+        maxY = floor(Double(aRect.origin.y.native + aRect.size.height.native))
     }
 
     
     if opts.contains(.AlignMinXOutward) {
         guard minX.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        minX = floor(aRect.origin.x.native)
+        minX = floor(Double(aRect.origin.x.native))
     }
     if opts.contains(.AlignMinYOutward) {
         guard minY.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        minY = floor(aRect.origin.y.native)
+        minY = floor(Double(aRect.origin.y.native))
     }
     if opts.contains(.AlignMaxXOutward) {
         guard maxX.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        maxX = ceil(aRect.origin.x.native + aRect.size.width.native)
+        maxX = ceil(Double(aRect.origin.x.native + aRect.size.width.native))
     }
     if opts.contains(.AlignMaxYOutward) {
         guard maxY.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        maxY = ceil(aRect.origin.y.native + aRect.size.height.native)
+        maxY = ceil(Double(aRect.origin.y.native + aRect.size.height.native))
     }
     
 
     if opts.contains(.AlignMinXNearest) {
         guard minX.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        minX = round(aRect.origin.x.native)
+        minX = round(Double(aRect.origin.x.native))
     }
     if opts.contains(.AlignMinYNearest) {
         guard minY.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        minY = round(aRect.origin.y.native)
+        minY = round(Double(aRect.origin.y.native))
     }
     if opts.contains(.AlignMaxXNearest) {
         guard maxX.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        maxX = round(aRect.origin.x.native + aRect.size.width.native)
+        maxX = round(Double(aRect.origin.x.native + aRect.size.width.native))
     }
     if opts.contains(.AlignMaxYNearest) {
         guard maxY.isNaN else { fatalError(listOfOptionsIsInconsistentErrorMessage) }
-        maxY = round(aRect.origin.y.native + aRect.size.height.native)
+        maxY = round(Double(aRect.origin.y.native + aRect.size.height.native))
     }
     
     var resultOriginX = Double.nan
@@ -584,10 +584,10 @@
     }
     
     var result = NSZeroRect
-    result.origin.x.native = resultOriginX
-    result.origin.y.native = resultOriginY
-    result.size.width.native = resultWidth
-    result.size.height.native = resultHeight
+    result.origin.x.native = CGFloat.NativeType(resultOriginX)
+    result.origin.y.native = CGFloat.NativeType(resultOriginY)
+    result.size.width.native = CGFloat.NativeType(resultWidth)
+    result.size.height.native = CGFloat.NativeType(resultHeight)
     
     return result
 }
